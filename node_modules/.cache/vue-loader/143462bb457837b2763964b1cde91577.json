{"remainingRequest":"/home/novalite/internship-project/social-network-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/novalite/internship-project/social-network-vue/src/components/Comments.vue?vue&type=style&index=0&id=5847e424&scoped=true&lang=css&","dependencies":[{"path":"/home/novalite/internship-project/social-network-vue/src/components/Comments.vue","mtime":1570106152166},{"path":"/home/novalite/internship-project/social-network-vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/novalite/internship-project/social-network-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/novalite/internship-project/social-network-vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/novalite/internship-project/social-network-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/novalite/internship-project/social-network-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.border {\n    border: 1px solid grey;\n    padding: 20px;\n    border-radius: 10px;\n}\n.trash:hover {\n    cursor: pointer;\n}\n",{"version":3,"sources":["Comments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Comments.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"border\">\n    <b-button @click=\"toggle()\" variant=\"dark\">Show comments</b-button>\n\n    <b-collapse :id=\"postId\" class=\"mt-2\">\n\n        <div class=\"m-3\">\n            <b-form-input class=\"mb-2\" v-model=\"commentTitle\" placeholder=\"Comment title\"></b-form-input>\n            <b-form-textarea v-model=\"commentBody\"  placeholder=\"Comment text...\"></b-form-textarea>\n            <p v-if=\"empty\" class=\"m-3\">To comment you need to enter title and text first. </p>\n            <b-button class=\"m-3\" @click=\"comment()\" variant=\"dark\">Comment</b-button>\n        </div>\n        <div v-for=\"comment of comments\" :key=\"comment.id\">\n            <b-card :header=\"comment.commentTitle\" class=\"mb-3\">\n                <p>{{comment.commentBody}}</p>\n                <div class=\"mt-5\">\n                    <p class=\"float-left\">\n                        <b>Author:</b><a class=\"ml-2\" @click.middle=\"toggle()\" :href=\"route + findAuthor(comment.author)\">{{findAuthor(comment.author)}}</a>\n                    </p>\n                    <unicon v-if=\"user.username === findAuthor(comment.author)\" \n                        class=\"float-right trash\" name=\"trash-alt\" fill=\"red\" @click=\"deleteComment(comment.id)\" />\n                </div>\n            </b-card>\n        </div>\n    </b-collapse>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\"\n\nexport default {\n    name: 'Comments',\n    props: {\n        postId: Number,\n        users: Array,\n    },\n    data() {\n        return {\n            comments: [],\n            commentBody: '',\n            commentTitle: '',\n            route: '/users/',\n            user: JSON.parse(localStorage.getItem('user')),\n            empty: false\n        }\n    },\n    created() {\n        axios.get(`http://localhost:9000/comments/${this.postId}`)\n        .then((response) => {\n            this.comments = response.data;\n            this.comments.reverse()\n        })\n    },\n    methods: {\n        toggle() {\n            this.$root.$emit('bv::toggle::collapse', this.postId)\n        },\n        findAuthor(id) {\n            return this.users.find(x => x.id == id).username;\n        },\n        comment() {\n            if(this.commentBody != '' && this.commentTitle != ''){\n                axios.post('http://localhost:9000/comment', {\n                postId: this.postId,\n                author: this.user.id,\n                commentTitle: this.commentTitle,\n                commentBody: this.commentBody\n                }).then(() => {\n                    axios.get(`http://localhost:9000/comments/${this.postId}`)\n                    .then((response) => {\n                        this.comments = response.data;\n                        this.comments.reverse()\n                    }).then(() => {\n                        this.commentTitle = '';\n                        this.commentBody = '';\n                    })\n                })\n            } else {\n                this.empty = true;\n                setTimeout(() => {\n                    this.empty = false;\n                }, 2000)\n            }\n        },\n        deleteComment(id) {\n            axios.delete(`http://localhost:9000/comment/${id}`)\n            .then(() => {\n                axios.get(`http://localhost:9000/comments/${this.postId}`)\n                .then((response) => {\n                    this.comments = response.data;\n                    this.comments.reverse()\n                })\n            })\n        }\n    }\n}\n</script>\n\n<style scoped>\n    .border {\n        border: 1px solid grey;\n        padding: 20px;\n        border-radius: 10px;\n    }\n    .trash:hover {\n        cursor: pointer;\n    }\n</style>"]}]}